<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Keen on Art of Tech]]></title>
  <link href="http://blog.tinyxd.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.tinyxd.me/"/>
  <updated>2013-02-26T22:45:25+08:00</updated>
  <id>http://blog.tinyxd.me/</id>
  <author>
    <name><![CDATA[Tiny]]></name>
    <email><![CDATA[admin@tinyxd.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim的一些配置]]></title>
    <link href="http://blog.tinyxd.me/blog/2013/01/17/vim-config/"/>
    <updated>2013-01-17T17:44:00+08:00</updated>
    <id>http://blog.tinyxd.me/blog/2013/01/17/vim-config</id>
    <content type="html"><![CDATA[<p>一直很想系统的学习vim，因为各种原因把，一直把这个计划搁置到了现在，现在凑着学习vimwiki，再次把这个提上日程。 <br/>
vim配置： <br/>
使用了<a href="https://github.com/vingel/vim/blob/master/vimrc">vingel</a>的配置文件。 <br/>
由于我还要学习vimwiki，所以添加了vimwiki的一些配置。
```  <br/>
"""""""""""""""""""""""""""""""""""""""
"vimwiki设置
"""""""""""""""""""""""""""""""""""""""
" 打开语法高亮
"syntax enable
syntax on</p>

<p>" 打开对文件类型插件的支持
filetype indent on
filetype plugin on
"filetype plugin indent on</p>

<p>" ######### VimWiki 写作助手 ######### "</p>

<p>" 使用鼠标映射
let g:vimwiki_use_mouse = 1</p>

<p>" 不要将驼峰式词组作为 Wiki 词条
let g:vimwiki_camel_case = 0</p>

<p>let g:vimwiki_list = [{
\ 'path': '/media/software/Dropbox/my_vimwiki_site/wiki',
\ 'path_html': '/media/software/Dropbox/my_vimwiki_site/html/',
 \'template_path' : 'd:/vimwiki/template/',</p>

<pre><code>        \'template_default' : 'default_template',
        \'template_ext' : '.html',
</code></pre>

<p>\ 'auto_export': 1,}]</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[archlinux修改mac地址]]></title>
    <link href="http://blog.tinyxd.me/blog/2012/08/23/archlinux-change-mac/"/>
    <updated>2012-08-23T00:03:00+08:00</updated>
    <id>http://blog.tinyxd.me/blog/2012/08/23/archlinux-change-mac</id>
    <content type="html"><![CDATA[<p>快开学了，开学了紧接着就是找工作。由于今年的形势还不太好，所以最近一直在复习一些编程方面的东西，好久没更新文章了。 <br/>
还没到月底，自己的流量都已经用完了，悲催啊！！！借用别人的，这就需要修改mac地址。学校流量3G真的伤不起阿！！！囧 <br/>
查阅Archlinux Wiki可以看到有两种临时改变mac地址的方法：  <br/>
1.使用macchanger或者使用ip命令：  <br/>
<code>bash
macchanger --mac=XX:XX:XX:XX:XX:XX
</code>
或者
<code>bash
ip link set dev eth0 down
ip link set dev eth0 address XX:XX:XX:XX:XX:XX
ip link set dev eth0 up
</code>
2.在每次启动时自动修改MAC地址。   <br/>
创建文件<code>/etc/rc.d/functions.d/macspoof</code>   <br/>
```
spoof_mac() {</p>

<pre><code>ip link set dev eth0 address XX:XX:XX:XX:XX:XX
</code></pre>

<p>}</p>

<p>add_hook sysinit_end spoof_mac
```
具体可参见Archlinux wiki。</p>

<p>inode上网可参考我以前的一篇文章:<a href="http://blog.tinyxd.me/blog/2012/05/25/archbang-arch-linux-an-zhuang-inode/">http://blog.tinyxd.me/blog/2012/05/25/archbang-arch-linux-an-zhuang-inode/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux堆的管理]]></title>
    <link href="http://blog.tinyxd.me/blog/2012/08/09/linux-heap-management/"/>
    <updated>2012-08-09T18:32:00+08:00</updated>
    <id>http://blog.tinyxd.me/blog/2012/08/09/linux-heap-management</id>
    <content type="html"><![CDATA[<p>每个Unix进程都拥有一个特殊的线性区，这个线性区就是所谓的堆（heap），堆用于满足进程的动态内存请求。内存描述符的start_brk与brk字段分别限定了这个区的开始地址和结束地址。</p>

<!--more-->


<p>进程可以使用下面的API来请求和释放动态内存：</p>

<p>malloc（size）</p>

<pre><code>请求size个字节的动态内存。如果分配成功，就返回所分配内存单元第一个字节的线性地址。 
</code></pre>

<p>calloc（n，size）</p>

<pre><code>请求含有n个大小为size的元素的一个数组。如果分配成功，就把数组元素初始化为0，并返回第一个元素的线性地址。 
</code></pre>

<p>realloc（ptr，size）</p>

<pre><code>改变由前面的malloc()或calloc()分配的内存区字段的大小。 
</code></pre>

<p>free（addr）</p>

<pre><code>释放由malloc()或calloc()分配的起始地址为addr的线性区。 
</code></pre>

<p>brk(addr)</p>

<pre><code>直接修改堆的大小。addr参数指定current-&gt;mm-&gt;brk的新值，返回值是线性区新的结束地址（进程必须检查这个地址和所请求的地址值addr是否一致）。  
</code></pre>

<p>sbrk(incr)</p>

<pre><code>类似于brk()，不过其中的incr参数指定是增加还是减少以字节为单位的堆大小。 
</code></pre>

<p>brk()函数和以上列出的函数有所不同，因为它是唯一以系统调用的方式实现的函数，而其他所有的函数都是使用brk()和mmap()系统调用实现的C语言库函数。</p>

<p>当用户态的进程调用brk()系统调用时，内核执行sys_brk(addr)函数。该函数首先验证addr参数是否位干进程代码所在的线性区。如 果 是，则立即返回，因为堆不能与进程代码所在的线性区重叠：<br/>
``` c</p>

<pre><code>mm = current-&gt;mm; 

down_write(&amp;mm-&gt;mmap_sem); 

if (addr &lt; mm-&gt;end_code) { 

out: 

    up_write(&amp;mm-&gt;mmap_sem); 

    return mm-&gt;brk; 

} 
</code></pre>

<p>```</p>

<p>由于brk()系统调用作用于某一个非代码的线性区，它分配和释放完整的页 。因此，该函数把addr的值调整为PAGE_SIZE的倍数，然后把调整的结果与内存描述符的brk字段的值进行比较：
``` c</p>

<pre><code>newbrk = (addr + 0xfff) &amp; 0xfffff000; 

oldbrk = (mm-&gt;brk + 0xfff) &amp; 0xfffff000; 

if (oldbrk == newbrk) { 

    mm-&gt;brk = addr; 

    goto out; 

} 
</code></pre>

<p>```</p>

<p>如果进程请求缩小堆，则sys_brk()调用do_munmap()函数完成这项任务，然后返回：
``` c</p>

<pre><code>if (addr &lt;= mm-&gt;brk) { 

    if (!do_munmap(mm, newbrk, oldbrk-newbrk)) 

        mm-&gt;brk = addr; 

    goto out; 

} 
</code></pre>

<p>```</p>

<p>如果进程请求扩大堆，则sys_brk()首先检查是否允许进程这样做。如果进程企图分配在其跟制范围之外的内存，函数并不多分配内存，只简单地返回mm->brk的原有值：
``` c</p>

<pre><code>rlim = current-&gt;signal-&gt;rlim[RLIMIT_DATA].rlim_cur; 

if (rlim &lt; RLIM_INFINITY &amp;&amp; addr - mm-&gt;start_data &gt; rlim) 

    goto out; 
</code></pre>

<p>```</p>

<p>然后，函数检查扩大后的堆是否和进程的其他线性区相重叠，如果是，不做任何事情就返回：
``` c</p>

<pre><code>if (find_vma_intersection(mm, oldbrk, newbrk+PAGE_SIZE)) 

    goto out; 
</code></pre>

<p>```</p>

<p>如果一切都顺利，则调用do_brk()函数。如果它返回oldbrk,则分配成功且sys_brt()函数返回addr的值；否则，返回旧的mm->brk值：
``` c</p>

<pre><code>if (do_brk(oldbrk, newbrk-oldbrk) == oldbrk) 

    mm-&gt;brk = addr; 

goto out; 
</code></pre>

<p>```</p>

<p>do_brk()函数实际上是仅处理匿名线性区的do_mmap()的简化版。可以认为它的调用等价于：
``` c</p>

<pre><code>do_mmap(NULL, oldbrk, newbrk-oldbrk, PROT_READ|PROT_WRITE|PROT_EXEC, 

        MAP_FIXED|MAP_PRIVATE, 0) 
</code></pre>

<p>```</p>

<p>当然，do_brk()比do_mmap()稍快，因为前者假定线性区不映射磁盘上的文件，从而避免了检查线性区对象的几个字段。</p>

<p>本文参考《深入理解linux内核》。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux系统调用]]></title>
    <link href="http://blog.tinyxd.me/blog/2012/08/08/linux-system-calls/"/>
    <updated>2012-08-08T18:18:00+08:00</updated>
    <id>http://blog.tinyxd.me/blog/2012/08/08/linux-system-calls</id>
    <content type="html"><![CDATA[<p><strong><em>摘要</em></strong>：操作系统为在用户态运行的进程与硬件设备（如CPU、磁盘、打印机等等）进行交互提供了一组接口。在应用程序和硬件之间设置一个额外层具有很多优点。首先，这使得编程更加容易，那用户从学习硬件设备的低级编程特性中解放出来。其次，这极大地提高了系统的安全性，因为内核在试图满足某个请求之前在接口级就可以检查这种请求的正确性。最后，更重要的是这些接口使得程序更具有可移植性，因为只要内核所提供的一组接口相同，那么在任一内核上就可以正确地编译和执行程序。</p>

<h2>简介     </h2>

<p>系统调用是在内核中实现的，再通过一定的方式把系统调用给用户，一般都通过门(gate)陷入(trap)实现。系统调用是用户程序和内核交互的接口。 </p>

<!--more-->


<p>Linux系统在CPU的保护模式下提供了四个特权级别，目前内核都只用到了其中的两个特权级别，分别为“特权级0”和“特权级3”,[软间隔]级别0也就是我们通常所讲的内核模式，级别3也就是我们通常所讲的用户模式。划分这两个级别主要是对系统提供保护。内核模式可以执行一些特权指令和进入用[软间隔]户模式，而用户模式则不能。 </p>

<p>系统服务之所以需要通过系统调用提供给用户空间的根本原因是为了对系统“保护”，因为我们知道Linux的运行空间分为内核空间与用户空间，它们各自运行在不同的级别中，逻辑上相互隔离。所以用户进程在通常情况下不允许访问内核数据，也无法使用内核函数，它们只能在用户空间操作用户数据，调用户用空间函数。比如我们熟悉的“hello world”程序（执行时）就是标准的户空间进程，它使用的打印函数printf就属于用户空间函数，打印的字符“hello word”字符串也属于用户空间数据。</p>

<p>但是很多情况下，用户进程需要获得系统服务（调用系统程序），这时就必须利用系统提供给用户的“特殊”接口——系统调用了，它的特殊性主要在于规定了用户进程进入内核的具体位置；换句话说用户访问内核的路径是事先规定好的，只能从规定位置进入内核，而不准许肆意跳入内核。有了这样的陷入内核的统一访问路径限制才能保证内核安全无虞。我们可以形象地描述这种机制：作为一个游客，你可以买票要求进入野生动物园，但你必须老老实实的坐在观光车上，按照规定的路线观光游览。当然，不准下车，因为那样太危险，不是让你丢掉小命，就是让你吓坏了野生动物。</p>

<h2>API和系统调用 </h2>

<p>应用编程接口（API）与系统调用有所不同，前者只是一个函数定义，说明了如何获得一个给定的服务；而后者是通过软中断向内核态发出一个明确的请求。</p>

<p>从编程者的观点看，API和系统调用之间的差别是没有关系的：唯一相关的事情就是函数名、参数类型及返回代码的含义。然而，从内核设计者的观点看，这种差别确实有关系，因为系统调用属于内核，而用户态的库函数不属于内核。</p>

<h2>系统调用、用户编程接口（API）、系统命令、和内核函数的关系 </h2>

<p>系统调用并非直接和程序员或系统管理员打交道，它仅仅是一个通过软中断机制（我们后面讲述）向内核提交请求，获取内核服务的接口。而在实际使用中程序员调用的多是用户编程接口——API，而管理员使用的则多是系统命令。</p>

<p>用户编程接口其实是一个函数定义，说明了如何获得一个给定的服务，比如read()、malloc()、free（）、abs()等。它有可能和系统调用形式上一致，比如read()接口就和read系统调用对应，但这种对应并非一一对应，往往会出现几种不同的API内部用到统一个系统调用，比如malloc()、free（）内部利用brk( )系统调用来扩大或缩小进程的堆；或一个API利用了好几个系统调用组合完成服务。更有些API甚至不需要任何系统调用——因为它不必需要内核服务，如计算整数绝对值的abs（）接口。</p>

<p>另外要补充的是Linux的用户编程接口遵循了在Unix世界中最流行的应用编程界面标准——POSIX标准，这套标准定义了一系列API。在Linux中（Unix也如此）这些API主要是通过C库（libc）实现的，它除了定义的一些标准的C函数外，一个很重要的任务就是提供了一套封装例程（wrapper routine）将系统调用在用户空间包装后供用户编程使用。</p>

<p>不过封装并非必须的，如果你愿意直接调用，Linux内核也提供了一个syscall()函数来实现调用，我们看个例子来对比一下通过C库调用和直接调用的区别。</p>

<p> 
``` c 例子</p>

<h1>include &lt;syscall.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/types.h></h1>

<p>int main(void) {</p>

<p>long ID1, ID2;</p>

<p>/<em>-----------------------------</em>/</p>

<p>/<em> 直接系统调用</em>/</p>

<p>/<em> SYS_getpid (func no. is 20) </em>/</p>

<p>/<em>-----------------------------</em>/</p>

<p>ID1 = syscall(SYS_getpid);</p>

<p>printf ("syscall(SYS_getpid)=%ld\n", ID1);</p>

<p>/<em>-----------------------------</em>/</p>

<p>/<em> 使用"libc"封装的系统调用 </em>/</p>

<p>/<em> SYS_getpid (Func No. is 20) </em>/</p>

<p>/<em>-----------------------------</em>/</p>

<p>ID2 = getpid();</p>

<p>printf ("getpid()=%ld\n", ID2);</p>

<p>return(0);</p>

<p>}
```
 </p>

<p>系统命令相对编程接口更高了一层，它是内部引用API的可执行程序，比如我们常用的系统命令ls、hostname等。Linux的系统命令格式遵循系统V的传统，多数放在/bin和/sbin下（相关内容可看看shell等章节）。</p>

<p>有兴趣的话可以通过strace ls或strace hostname 命令查看一下它们用到的系统调用，你会发现诸如open、brk、fstat、ioctl 等系统调用被用在系统命令中。</p>

<p>下一个需要解释一下的问题是内核函数和系统调用的关系，内核函数大家不要想像的过于复杂，其实它们和普通函数很像，只不过在内核实现，因此要满足一些内核编程的要求[3]。系统调用是一层用户进入内核的接口，它本身并非内核函数，进入内核后，不同的系统调用会找到对应到各自的内核函数——换个专业说法就叫：系统调用服务服务例程。实际对请求服务的是内核函数而非调用接口。</p>

<p>比如系统调用 getpid实际就是调用内核函数sys_getpid。
```
asmlinkage long sys_getpid(void)</p>

<p>{</p>

<p>       return current->tpid;</p>

<p>}
```
Linux系统种存在许多的内核函数，有些是内核文件种自己使用的，有些则是可以export出来供内核其他部分共同使用的，具体情况自己决定。</p>

<p>内核公开的内核函数——export出来的——可以使用命令ksyms 或 cat /proc/ksyms来查看。另外网上还有一本归纳分类内核函数的书叫作《The Linux Kernel API Book》，有兴趣的读者可以去看看。</p>

<p>总而言之，从用户角度向内核看，依次是系统命令、编程接口、系统调用和内核函数。</p>

<h2>系统调用处理程序及服务例程 </h2>

<p>当用户态的进程调用一个系统调用时，CPU切换到内核态并开始执行一个内核函数，在80x86体系结构中，可以用两种不同的方式调用Linux的系统调用。两种方式的最终结果都是跳转到所谓系统调用处理程序（systerm call handler）的汇编语言函数。</p>

<p>因为内核实现了很多不同的系统调用，因此进程必须传递一个名为系统调用号（systerm call number）的参数来识别所需的系统调用，eax寄存器就用作此目的。</p>

<p>所有的系统调用都返回一个整数值。这些返回值与封装例程返回值的约定是不同的。在内核中，正数或0表示系统调用成功结束，而负数表示一个出错条件。在后一种情况下，这个值就是存放在errno变量中必须返回给应用程序的负出错码。内核没有设置或使用errno变量，而封装例程从系统调用返回之后设置这个变量。</p>

<p>xyz()系统调用对应的服务例程的名字通常是sys_xyz()。不过也会有些例外。</p>

<p>Linux中实现系统调用利用了0x86体系结构中的软件中断[4]。软件中断和我们常说的中断(硬件中断)不同之处在于——它是通过软件指令触发而并非外设，也就是说又编程人员出发的一种异常，具体的讲就是调用int $0x80汇编指令，这条汇编指令将产生向量为128的编程异常。</p>

<p>之所以系统调用需要借助异常实现，是因为当用户态的进程调用一个系统调用时，CPU便被切换到内核态执行内核函数[5]，而我们在i386体系结构部分已经讲述过了进入内核——进入高特权级别——必须经过系统的门机制，这里异常实际上就是通过系统门陷入内核（除了int 0x80外用户空间还可以通过int3——向量3、into——向量4 、bound——向量5等异常指令进入内核，而其他异常用户空间程序无法利用，都是由系统使用的）。</p>

<p>我们更详细的解释一下这个过程。int $0x80指令目的是产生一个编号为128的编程异常，这个编程异常对应的中断描述符表IDT中的第128项——也就是对应的系统门描述符。门描述符中含有一个预设的内核空间地址，它指向了系统调用处理程序：system_call()（别和系统调用服务程序混淆,这个程序在entry.S文件中用汇编语言编写）。</p>

<p>很显然所有的系统调用都会统一的转到这个地址，但Linux一共有2、3百个系统调用都从这里进入内核后又该如何派发它们到各自的服务程序去呢？别发昏，解决这个问题的方法非常简单：首先Linux为每个系统调用都进行了编号（0—NR_syscall），同时在内核中保存了一张系统调用表，该表中保存了系统调用编号和其对应的服务例程，因此在系统调入通过系统门陷入内核前，需要把系统调用号一并传入内核，在x86上，这个传递动作是通过在执行int0x80前把调用号装入eax寄存器实现的。这样系统调用处理程序一旦运行，就可以从eax中得到数据，然后再去系统调用表中寻找相应服务例程了。</p>

<p>除了需要传递系统调用号以外，许多系统调用还需要传递一些参数到内核，比如sys_write(unsigned int fd, const char * buf, size_t count)调用就需要传递文件描述符号fd和要写入的内容buf和写入字节数count等几个内容到内核。碰到这种情况，Linux会有6个寄存器使用来传递这些参数：eax (存放系统调用号)、 ebx、ecx、edx、esi及edi来存放这些额外的参数（以字母递增的顺序）。具体做法是在system_call( )中使用SAVE_ALL宏把这些寄存器的值保存在内核态堆栈中。</p>

<p>有始便有终，当服务例程结束时，system_call( ) 从eax获得系统调用的返回值，并把这个返回值存放在曾保存用户态 eax寄存器栈单元的那个位置上。然后跳转到ret_from_sys_call( )，终止系统调用处理程序的执行。</p>

<p>当进程恢复它在用户态的执行前，RESTORE_ALL宏会恢复用户进入内核前被保留到堆栈中的寄存器值。其中eax返回时会带回系统调用的返回码。（负数说明调用错误，0或正数说明正常完成）</p>

<h2>参数传递 </h2>

<p>与普通函数类似，系统调用通常也需要输入/输出参数，这些参数可能是实际的值，也可能是用户态进程地址空间的变量，甚至是指向用户态函数的指针的数据结构地址。</p>

<p>普通C函数的参数传递是通过把参数值写入活动的程序栈（用户态栈或内核态栈）实现的。因为系统调用是一种横跨用户和内核两大陆地的特殊函数，所以既不能使用用户态栈也不能使用内核态栈。更确切地说，在发怵系统调用之前，系统调用的参数被写入CPU寄存器，然后在调用系统调用服务例程之前，内核再把存放在CPU中的参数拷贝到内核态堆栈中，这是因为系统调用服务例程是普通的C函数。</p>

<br >


<p>本文参考自《深入理解linux内核》和<a href="http://chriszeng87.iteye.com/blog/1204500">linux系统调用</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux缺页异常处理程序]]></title>
    <link href="http://blog.tinyxd.me/blog/2012/08/07/linux-page-fault-exception/"/>
    <updated>2012-08-07T12:54:00+08:00</updated>
    <id>http://blog.tinyxd.me/blog/2012/08/07/linux-page-fault-exception</id>
    <content type="html"><![CDATA[<p>Linux的缺页（Page Fault）异常处理程序必须区分以下两种情况：由编程错误所引起的异常，及由引用属于进程地址空间但还尚未分配物理页框的页所引起的异常。</p>

<p>线性区描述符可以让缺页异常处理程序非常有效地完成它的工作。do_page_fault()函数是80x86上的缺页中断服务程序，它把引起缺页的线性地址和当前进程的线性区相比较，从而能够根据和下图所示的方案选择适当的方法处理这个异常。</p>

<!--more-->


<iframe src="https://skydrive.live.com/embed?cid=1F260DE1061FCF3E&resid=1F260DE1061FCF3E%21159&authkey=ACvRvyPr-3BWicI" width="320" height="207" frameborder="0" scrolling="no"></iframe>


<p></p>

<p>在实际中，情况更复杂一些，因为缺页处理程序必须处理多种分得更细的特殊情况，它们不宜在总体方案中列出来，还必须区分许多种合理的访问。处理程序的详细流程图如图所示：</p>

<iframe src="https://skydrive.live.com/embed?cid=1F260DE1061FCF3E&resid=1F260DE1061FCF3E%21160&authkey=AFYUnmLPL0RCxXM" width="299" height="319" frameborder="0" scrolling="no"></iframe>


<p></p>

<p>本文参考自《深入理解linux内核》和<a href="http://blog.csdn.net/yunsongice/article/details/5637671">缺页异常处理程序</a> 。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Keen on Art of Tech]]></title>
  <link href="http://tinyxd.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://tinyxd.me/"/>
  <updated>2012-07-09T00:44:27+08:00</updated>
  <id>http://tinyxd.me/</id>
  <author>
    <name><![CDATA[Tiny]]></name>
    <email><![CDATA[admin@tinyxd.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux sleep 的用法]]></title>
    <link href="http://tinyxd.me/blog/2012/07/06/linux-sleep-usage/"/>
    <updated>2012-07-06T12:40:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/07/06/linux-sleep-usage</id>
    <content type="html"><![CDATA[<p><strong>应用程序</strong>：</p>

<pre><code>#include &lt;syswait.h&gt;
usleep(n) //n微秒
Sleep（n）//n毫秒
sleep（n）//n秒
</code></pre>

<!--more-->


<p><strong>驱动程序</strong>：</p>

<pre><code>#include &lt;linux/delay.h&gt;
mdelay(n) //milliseconds 其实现
</code></pre>

<p>```</p>

<h1>ifdef notdef</h1>

<h1>define mdelay(n) (\</h1>

<p>{unsigned long msec=(n); while (msec--) udelay(1000);})</p>

<h1>else</h1>

<h1>define mdelay(n) (\</h1>

<p>(__builtin_constant_p(n) &amp;&amp; (n)&lt;=MAX_UDELAY_MS) ? udelay((n)*1000) : \
({unsigned long msec=(n); while (msec--) udelay(1000);}))</p>

<h1>endif</h1>

<p>```
调用asm/delay.h的udelay,udelay应该是纳秒级的延时</p>

<p>dos:</p>

<pre><code>sleep(1); //停留1秒 
delay(100); //停留100毫秒   
</code></pre>

<p>Windows:</p>

<pre><code>Sleep(100); //停留100毫秒 
</code></pre>

<p>Linux:</p>

<pre><code>sleep(1); //停留1秒 
usleep(1000); //停留1毫秒 
</code></pre>

<p>每一个平台不太一样,最好自己定义一套跨平台的宏进行控制   <br/>
附：Linux下（使用的gcc的库），sleep()函数是以秒为单位的，sleep(1);就是休眠1秒。而MFC下的sleep()函数是以微秒为单位的，sleep(1000);才是休眠1秒。而如果在Linux下也用微妙为单位休眠，可以使用线程休眠函数:void usleep(unsigned long usec);当然，使用的时候别忘记#include &lt;system.h>哦。另外，linux下还有个delay()函数，原型为extern void delay(unsigned int msec);它可以延时msec*4毫秒，也就是如果想延时一秒钟的话，可以这么用 delay(250)。 <br/>
转载请注明出处：<a href="http://tinyxd.me/blog/2012/07/06/linux-sleep-usage/">http://tinyxd.me/blog/2012/07/06/linux-sleep-usage/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中国大陆linux源镜像地址]]></title>
    <link href="http://tinyxd.me/blog/2012/07/05/linux-mirrors-china/"/>
    <updated>2012-07-05T09:39:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/07/05/linux-mirrors-china</id>
    <content type="html"><![CDATA[<p>1.企业 <br/>
搜狐开源镜像站：</p>

<pre><code>http://mirrors.sohu.com/
</code></pre>

<p>网易开源镜像站：</p>

<pre><code>http://mirrors.163.com/
</code></pre>

<p>2.大学 <br/>
西安电子科技大学：</p>

<pre><code>http://ftp.xdlinux.info/  (IPv4+IPv6)
ftp://linux.xidian.edu.cn/
</code></pre>

<p>中国科学技术大学：</p>

<pre><code>http://mirrors.ustc.edu.cn/ (IPv4+IPv6)
http://mirrors4.ustc.edu.cn/
http://mirrors6.ustc.edu.cn/
</code></pre>

<!--more-->


<p>上海交通大学：</p>

<pre><code>http://ftp.sjtu.edu.cn/ (IPv4 only)
http://ftp6.sjtu.edu.cn (IPv6 only)
</code></pre>

<p>清华大学：</p>

<pre><code>http://mirrors.tuna.tsinghua.edu.cn/ (IPv4+IPv6)
http://mirrors.6.tuna.tsinghua.edu.cn/ (IPv6 only)
http://mirrors.4.tuna.tsinghua.edu.cn/ (IPv4 only)
</code></pre>

<p>天津大学：</p>

<pre><code>http://mirror.tju.edu.cn/
</code></pre>

<p>西南大学：</p>

<pre><code>http://linux.swu.edu.cn/swudownload/Distributions/
</code></pre>

<p>东北大学：</p>

<pre><code>http://mirror.neu.edu.cn/ (IPv4 only)
http://mirror.neu6.edu.cn/ (IPv6 only)
</code></pre>

<p>电子科技大学：</p>

<pre><code>http://ubuntu.uestc.edu.cn/
</code></pre>

<p>青岛大学：</p>

<pre><code>http://mirror.qdu.edu.cn/
</code></pre>

<p>兰州大学：</p>

<pre><code>http://mirror.lzu.edu.cn/
</code></pre>

<p>厦门大学：</p>

<pre><code>http://mirrors.xmu.edu.cn/
</code></pre>

<p>北京理工大学：</p>

<pre><code>http://mirror.bit.edu.cn (IPv4 only)
http://mirror.bit6.edu.cn (IPv6 only)
</code></pre>

<p>北京交通大学：</p>

<pre><code>http://mirror.bjtu.edu.cn (IPv4 only)
http://mirror6.bjtu.edu.cn (IPv6 only)
http://debian.bjtu.edu.cn (IPv4+IPv6)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Debian支持ntfs文件系统读写]]></title>
    <link href="http://tinyxd.me/blog/2012/06/30/debian-ntfs-filesysterm/"/>
    <updated>2012-06-30T15:45:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/06/30/debian-ntfs-filesysterm</id>
    <content type="html"><![CDATA[<p>刚装好debian发现在debian下往windows盘下拷贝不过去资料，上网查了些资料发现是因为不知道ntfs的读写。 <br/>
查看我的版本号6.0.5</p>

<pre><code>#more /etc/debian_version   
6.0.5   
</code></pre>

<p>我的Debian系统: 6.0.5 <br/>
要是用的软件使用软件:ntfs-3g <br/>
1.修改默认源 <br/>
因为我们学校有自己的源，故而修改成我们学校的源，而后进行更新</p>

<pre><code>apt-get update   
</code></pre>

<!--more-->


<p>2.执行安装 <br/>
执行命令:</p>

<pre><code>apt-get install ntfs-3g   
</code></pre>

<p>3.使用 <br/>
直接使用执行命令:</p>

<pre><code>mount -t ntfs-3g /dev/hdax /mnt/windows   
</code></pre>

<p>这里的/dev/hdax 请改为你自己的windows磁盘分区，可利用fdisk -l 查看。  <br/>
如下： <br/>
``` <br/>
debian:/mnt# fdisk -l
Disk /dev/sda: 500.1 GB, 500107862016 bytes
255 heads, 63 sectors/track, 60801 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x559ed1e5</p>

<p>  Device Boot      Start         End      Blocks   Id  System
/dev/sda1               1        6528    52436128+   7  HPFS/NTFS
/dev/sda2            6529       60802   435949345+   f  W95 Ext'd (LBA)
/dev/sda5            6529       24543   144705456    7  HPFS/NTFS
/dev/sda6           24544       42558   144705456    7  HPFS/NTFS
/dev/sda7           42559       53060    84357283+   7  HPFS/NTFS
/dev/sda8           53061       53321     2096451    b  W95 FAT32
/dev/sda9   *       53322       53346      194560   83  Linux
/dev/sda10          53346       53589     1951744   82  Linux swap / Solaris
/dev/sda11          53589       55413    14647296   83  Linux
/dev/sda12          55413       60802    43287552   83  Linux <br/>
```</p>

<p>如果是加入开机自动映射的话，编辑/etc/fstab,加入如下内容就可以了。</p>

<pre><code>/dev/hdax /mnt/windows ntfs-3g defaults 0 0   
</code></pre>

<p>下面是我的系统加载NTFS文件系统的相关命令：</p>

<pre><code>mount -t ntfs-3g /dev/sda6 /mnt/D
mount -t ntfs-3g /dev/sda7 /mnt/E   
</code></pre>

<p>以上文章是对网上搜集的资料的整理。如需转载请注明出处，本文地址： <br/>
<code>http://tinyxd.me/blog/2012/06/30/debian-ntfs-filesysterm/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debian安装nvidia显卡驱动]]></title>
    <link href="http://tinyxd.me/blog/2012/06/18/debianan-zhuang-nvidiaxian-qia-qu-dong/"/>
    <updated>2012-06-18T20:31:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/06/18/debianan-zhuang-nvidiaxian-qia-qu-dong</id>
    <content type="html"><![CDATA[<p>在自己的电脑上硬盘安装了Debian.下面介绍一下我是如何安装显卡驱动的.我的显卡是GForce 7100GS的.</p>

<p>1>下载显卡驱动.</p>

<p>这个可以到Nvidia的官网上去找,找到自己对应的版本就可以了。</p>

<p>2>安装gcc并设置版本.</p>

<p>#apt-get install gcc 这样安装的是gcc-4.4,如果在安装过程中提示您安装的gcc版本有问题,你可以再安装一下gcc-4.3并将gcc版本设置为4.3,具体做法:</p>

<p>#apt-get install gcc-4.3</p>

<p>#ln -sf /usr/bin/gcc-4.3 /usr/bin/gcc 这一句用来将gcc的版本设置为4.3</p>

<p>#ls -l /usr/bin/gcc* 这一句用来查看当前使用的gcc版本</p>

<!--more-->


<p>3>安装make</p>

<p>#apt-get install make</p>

<p>4>安装编译头文件</p>

<p>#apt-get install build-essential linux-headers-$(uname -r)</p>

<p>5>编辑 /boot/gurb/grub.cfg</p>

<p>在linux /vmlinuz -2.6.32-5.........quite 后面加上 nomodeset  (作用是将原来普适的显卡驱动禁用)</p>

<p>6>进入字符界面 Ctrl+Alt+F1</p>

<p>7>停用X-Server:</p>

<p>#/etc/init.d/gdm3 stop</p>

<p>8>安装显卡驱动:</p>

<p> # sh .... (省略号部分为你下载的显卡驱动的名称) 你将会看到安装的进度条.</p>

<p>9>#startx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下使用lftp的小结]]></title>
    <link href="http://tinyxd.me/blog/2012/06/04/linuxxia-shi-yong-lftpde-xiao-jie/"/>
    <updated>2012-06-04T07:08:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/06/04/linuxxia-shi-yong-lftpde-xiao-jie</id>
    <content type="html"><![CDATA[<p>lftp的功能比较强大，相比原来用ftp，方便了很多。</p>

<p>1、登陆：</p>

<p>lftp ftp://yourname@site</p>

<p>pwd:*****</p>

<p>或 open ftp://yourname@site</p>

<!--more-->


<p>2、基本操作（转） <br/>
lftp使用介绍</p>

<p>lftp 是一个功能强大的下载工具，它支持访问文件的协议: ftp, ftps, http, https, hftp, fish.(其中ftps和https需要在编译的时候包含openssl库)。llftp的界面非常想一个shell: 有命令补全，历史记录，允许多个后台任务执行等功能，使用起来非常方便。它还有书签、排队、镜像、断点续传、多进程下载等功能。 <br/>
命令行语法
要看lftp的命令行语法，只要在shell中输入lftp --help <br/>
lftp [OPTS]
'lftp'是在 rc 文件执行后 lftp 执行的第一个命令 <br/>
-f 执行文件中的命令后退出 <br/>
-c 执行命令后退出 <br/>
--help 显示帮助信息后退出 <br/>
--version 显示 lftp 版本后退出 <br/>
其他的选项同 'open' 命令 <br/>
-e 在选择后执行命令 <br/>
-u [,] 使用指定的用户名/口令进行验证 <br/>
-p 连接指定的端口 <br/>
主机名, URL 或书签的名字 <br/>
如果在命令行中输入的站点名称，lftp将直接登录站点，比如 <br/>
ftp ftp://............. <br/>
如果在命令行不输入站点名称，则必须在进入到lftp界面后用open命令打开 <br/>
[yhj@ccse-yhj yhj]$ lftp <br/>
lftp :~> open ftp://................... <br/>
常用命令 <br/>
* 下载单个文件和一组文件，断点续传用-c参数 <br/>
lftp ................:/> get -c ls-lR.txt <br/>
lftp ...............:/> mget *.txt <br/>
* 镜像(反镜像即上传)一个目录，可以用多个线程并行镜像一个目录(--parallel=N) <br/>
lftp ................:/> mirror incoming local_name <br/>
lftp ................:/> mirror -R local_name <br/>
lftp ................:/> mirror --parallel=3 incoming local_name <br/>
* 多线程下载，类似网络蚂蚁的功能;缺省是5个线程 <br/>
lftp ................:/> pget -n 4 ls-lR.txt <br/>
* 后台任务管理 <br/>
缺省情况下，按 Ctrl+z,正在执行的任务将转为后台执行，也可以在命令行末尾加&amp;符号使任务在后台执行。用jobs命令可以查看所有的后台进程。用queue命令可以排队新的任务。如果退出lftp是还有任务在后台执行，lftp将转为后台执行。 <br/>
* 其它用法 <br/>
lftp支持类似bash的管道操作，例如用下面的命令可以将ftp服务器上的特定目录下(也可以是整个站点)所有文件的大小存到本地的文件ls.txt中 <br/>
lftp ................:/> du incoming > ls.txt <br/>
相关文件
/etc/lftp.conf <br/>
全局配置文件，实际位置依赖系统配置文件目录，可能在/etc，也可能在/usr/local/etc <br/>
~/.lftp/rc, ~/.lftprc <br/>
用户配置文件，将在/etc/lftp.conf之后执行，所以这里面的设置会覆盖/etc/lftp.conf中的设置。 <br/>
lftp 缺省不会显示 ftp 服务器的欢迎信息和错误信息，这在很多时候不方便，因为你有可能想知道这个服务器到底是因为没开机连不上，还是连接数已满。如果是这样，你可以在 ~/.lftprc 里写入一行 <br/>
debug 3
就可以看到出错信息了。 <br/>
更多的配置选项请查man手册或在lftp界面内用命令 set -a 获得。 <br/>
~/.lftp/log <br/>
当lftp转为后台非挂起模式执行时，输出将重定向到这里 <br/>
~/.lftp/bookmarks <br/>
这是lftp存储书签的地方，可以lftp查看bookmark命令 <br/>
~/.lftp/cwd_history <br/>
这个文件用来存储访问过的站点的工作目录</p>

<p>~/.lftprc  <br/>
在用lftp访问国内一些ftp服务器时，往往看到的中文是乱码  <br/>
^_<sup>不用慌，这是由于服务器和本地编码不一致造成的。我们只要在主目录下新建一个文件~/.lftprc或者~/.lftp/rc</sup>  <br/>
并在其中加入以下内容：  <br/>
debug 3set ftp:charset GBKset file:charset UTF-8#set ftp:passtive-mode no#alias utf8 " set ftp:charset UTF-8"#alias gbk " set ftp:charset GBK"  <br/>
登录ftp服务器  <br/>
言归正传，我们先来看看怎么登录ftp服务器  <br/>
lftp ftp://user:password@site:port  <br/>
lftp user:password@site:port  <br/>
lftp site -p port -u user,password  <br/>
lftp site:port -u user,password  <br/>
上面的几种方式都能正常工作，不过密码都是明文，这样好像不太安全哦。没关系  <br/>
lftp user@site:port  <br/>
系统会提示输入password，密码就回显为******了  <br/>
不过每次都输入这么多，好麻烦哦。 如果有类似leapftp的站点管理器就好了，其实lftp早就给我们想好了： 这就是bookmark。后面我们将会看到。  <br/>
常用命令  <br/>
在终端运行  <br/>
man lftp  <br/>
或登录ftp后输入  <br/>
help  <br/>
就可以看到命令列表  <br/>
下面我们看一下lftp常用的命令：  <br/>
ls  <br/>
显示远端文件列表(!ls 显示本地文件列表)。  <br/>
cd  <br/>
切换远端目录(lcd 切换本地目录)。  <br/>
get  <br/>
下载远端文件。  <br/>
mget  <br/>
下载远端文件(可以用通配符也就是 *)。  <br/>
pget  <br/>
使用多个线程来下载远端文件, 预设为五个。  <br/>
mirror  <br/>
下载/上传(mirror -R)/同步 整个目录。  <br/>
put  <br/>
上传文件。  <br/>
mput  <br/>
上传多个文件(支持通配符)。  <br/>
mv  <br/>
移动远端文件(远端文件改名)。  <br/>
rm  <br/>
删除远端文件。  <br/>
mrm  <br/>
删除多个远端文件(支持通配符)。  <br/>
mkdir  <br/>
建立远端目录。  <br/>
rmdir  <br/>
删除远端目录。  <br/>
pwd  <br/>
显示目前远端所在目录(lpwd 显示本地目录)。  <br/>
du  <br/>
计算远端目录的大小  <br/>
!  <br/>
执行本地 shell的命令(由于lftp 没有 lls, 故可用 !ls 来替代)  <br/>
lcd  <br/>
切换本地目录  <br/>
lpwd  <br/>
显示本地目录  <br/>
alias  <br/>
定义别名  <br/>
bookmark  <br/>
设定书签。  <br/>
exit  <br/>
退出ftp  <br/>
快捷书签  <br/>
补充作者：aBiNg  <br/>
ftp中的bookmark命令，是将配置写到~/.lftp/bookmarks文件中；我们可以直接修改此文件，快速登陆ftp服务器。</p>

<p>3、mirror 同步镜像，备份服务器文件</p>

<p>今天主要的问题是解决如何备份服务器端文件的问题。了解了mirror指令的用法后，发现比较适合而且好用。</p>

<p>基本使用方法：</p>

<p>1）、下载服务器端文件：</p>

<p> mirror –vn RCD LCD   //RCD为远程路径，LCD为本地路径</p>

<p>2）、上传文件：</p>

<p> mirror –R LCD RCD</p>

<p>下附一个自动同步的脚本：
```bash</p>

<h1>!bin/bash</h1>

<p>echo “script start at  <code>date ”+%Y-%m-%d %H:%M:%S”
HOST=”hostname”
USER=”yourname”
PASS=”password”
LCD=”LocalePath”
RCD=”RemotePath”
/usr/sbin/lftp &lt;&lt; EOF
open ftp://$USER:$PASS@$HOST
mirror $RCD $LCD
EOF
echo “script end at “</code>date ”+%Y-%m-%d %H:%M:%S”
```</p>
]]></content>
  </entry>
  
</feed>

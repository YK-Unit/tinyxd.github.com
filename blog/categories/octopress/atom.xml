<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Keen on Art of Tech]]></title>
  <link href="http://tinyxd.me/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://tinyxd.me/"/>
  <updated>2012-06-29T23:37:18+08:00</updated>
  <id>http://tinyxd.me/</id>
  <author>
    <name><![CDATA[Tiny]]></name>
    <email><![CDATA[admin@tinyxd.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress博客添加标签云]]></title>
    <link href="http://tinyxd.me/blog/2012/06/25/octopress-add-tag-cloud/"/>
    <updated>2012-06-25T00:35:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/06/25/octopress-add-tag-cloud</id>
    <content type="html"><![CDATA[<p>折腾了好久，终于弄好了。我基本是follow这篇文章的：<a href="http://log4d.com/2012/05/tag-cloud/">给 Octopress 加上标签功能</a> <br/>
官方只提供了category的云显示，和列表显示，这是其<a href="https://github.com/tokkonopapa/octopress-tagcloud">github地址</a>，其实官方提供的这个第三方插件并没有给文章加入tag的概念。（category和tag分别代表日志分类和标签）</p>

<!--more-->


<p>
现在我还对ruby不是很熟悉，但是看到了<a href="http://log4d.com/2012/05/tag-cloud/">这篇文章</a>，找到了<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards / octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">robbyedwards / octopress-tag-cloud</a>。前者采集文章的tag，后者是标签云的显示。 <br/>
这两个使用方法相同，把文件放到相应的目录即可。而第二个插件<code>octopress-tag-cloud</code> 会和官方的有冲突，直接用<a href="https://github.com/alswl/octopress-category-list">这个</a>就好。 <br/>
还有最后一点非常重要，得修改两个地方： <br/>
一个是sass/custom/_styles.scss
```</p>

<h1>content article .cloud li{</h1>

<p>  display: inline;
  list-style: none outside none;
  padding: 0 4px;
}</p>

<p>```</p>

<p>然后把显示tagcloud的页面 class改为cloud(class="cloud")。 <br/>
大功告成，tag cloud页面请点击<a href="http://tinyxd.me/tags/index.html">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给octopress添加关键字和网站描述]]></title>
    <link href="http://tinyxd.me/blog/2012/06/19/seo-meta-octopress/"/>
    <updated>2012-06-19T21:10:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/06/19/seo-meta-octopress</id>
    <content type="html"><![CDATA[<p>给octopress添加keywords和description。</p>

<p>1.修改source/<em>includes/head.html <br/>
<div><script src='https://gist.github.com/2460469.js?file=head.html'></script>
<noscript><pre><code>&lt;meta name=&quot;author&quot; content=&quot;{{ site.author }}&quot;&gt;
{% capture description %}{% if page.description %}{{ page.description }}{% elsif site.description %}{{ site.description }}{%else%}{{ content | raw_content }}{% endif %}{% endcapture %}
&lt;meta name=&quot;description&quot; content=&quot;{{ description | strip_html | condense_spaces | truncate:150 }}&quot;&gt;
{% if page.keywords %}&lt;meta name=&quot;keywords&quot; content=&quot;{{ page.keywords }}&quot;&gt;{%else%}&lt;meta name=&quot;keywords&quot; content=&quot;{{ site.keywords }}&quot;&gt;{% endif %}
</code></pre></noscript></div>
 <br/>
2.在</em>config.yml中添加如下内容
<code>
description: Keen on the software programming and Embedded development.（专注软件编程及嵌入式技术。）
keywords: ruby , linux , archlinux , debian , software ,programming , embedded ,gem,web development ,ubuntu , java
</code>
3.这样在主页代码中也会出现keywords和description信息。每个post也会出现。方便被搜索网站索引。这个涉及到了SEO。
以上文章参考自<a href="http://www.yatishmehta.in/seo-for-octopress">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为已经存在的github Octopress配置本地环境]]></title>
    <link href="http://tinyxd.me/blog/2012/05/23/wei-yi-jing-cun-zai-de-github-octopresspei-zhi-ben-di-huan-jing/"/>
    <updated>2012-05-23T20:59:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/05/23/wei-yi-jing-cun-zai-de-github-octopresspei-zhi-ben-di-huan-jing</id>
    <content type="html"><![CDATA[<p><strong>转自：</strong><br/>
http://www.360doc.com/content/12/0520/19/3565338_212362686.shtml</p>

<p>本文介绍如何为已经存在于github上的octopress配置本地环境。<br/>
在本地安装RVM(Ruby Version Manager)和Ruby 1.9.2；</p>

<p>从你的github得到你的octopress内容：</p>

<pre><code>git clone -b source git@github.com:username/username.github.com.git octopress # get the source code from your "source" branch of your octopress on github
＃ learn from: http://stackoverflow.com/questions/1911109/git-clone-a-specific-branch
cd octopress
git clone git@github.com:username/username.github.com.git _deploy # get your static pages content from your "master"branch of your cotopress on github
</code></pre>

<!--more-->


<p>安装依赖gems:</p>

<pre><code>gem install bundler # Install dependencies   
bundle install   #如果出现bundle命令没找到，还需要修改～/.bashrc
vim ~/.bashrc
#for ruby gem
PATH=$PATH:~/.gem/ruby/1.9.1/bin
export PATH
rake install # Install the default Octopress theme  不需要 因为我已经有了自己的主题   
rake setup_github_pages #需要这个 要不然rake deploy会出错   
</code></pre>

<p>这就基本结束了。</p>

<p>编写文章，预览部署：</p>

<pre><code>cd octopress
rake new_post["Your Title of Your Article"]
rake generate # generate your blog static pages content according to your input. 
rake preview # start a web server on "http://localhost:4000", you can preview your blog content.
rake deploy # push your static pages content to your github pages repo ("master" branch)
</code></pre>

<p>提交你的文本修改到github:</p>

<pre><code>cd your_local_octopress_directory
git add .
git commit -m 'your message'
git push origin source
</code></pre>

<p>注意：如果要从github得到最新的source内容，请运行以下命令：</p>

<pre><code>cd your_local_octopress_directory
cd _deploy
git pull origin master
cd ..
git pull origin source
</code></pre>

<p>原则很简单，只要记住“your_local_octopress_directory”对应的的remote source branch，而”_deploy”对应的是remote master branch即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress:新手教程]]></title>
    <link href="http://tinyxd.me/blog/2012/05/23/octopress-xin-shou-jiao-cheng/"/>
    <updated>2012-05-23T20:55:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/05/23/octopress-xin-shou-jiao-cheng</id>
    <content type="html"><![CDATA[<p><em>转载自：</em><br/>
http://geekontheway.github.com/blog/2011/12/03/octopress-for-freshman/<br/>
Octopress基于jekyll，刚开始使用起来也比较复杂：</p>

<pre><code>Octopress会有两个分支：source（编写博客）和master（生成好的博客），就像这样：

git remote -v

octopress git://github.com/imathis/octopress.git (fetch)
octopress git://github.com/imathis/octopress.git (push)
origin    git@github.com:geekontheway/geekontheway.github.com.git (fetch)
origin    git@github.com:geekontheway/geekontheway.github.com.git (push)


git branch -a

* source
  remotes/octopress/HEAD -&gt; octopress/master
  remotes/octopress/compass
  remotes/octopress/configuration
  remotes/octopress/edge
  remotes/octopress/generate_environment
  remotes/octopress/gh-pages
  remotes/octopress/master
  remotes/octopress/move_rakefile_configs
  remotes/octopress/post_names
  remotes/octopress/rake_minify_js
  remotes/octopress/refactor_code_highlight
  remotes/octopress/refactor_deployment
  remotes/octopress/refactor_js
  remotes/octopress/site
  remotes/octopress/site-deploy-test
  remotes/octopress/subdir
remotes/octopress/thor
</code></pre>

<p>其中只有origin仓库和source分支是必须的，其余分支或仓库建议删掉。</p>

<!--more-->


<p>我们来看一下source分支都有什么：</p>

<pre><code>CHANGELOG.markdown  
config.ru   
 _deploy  部署文件夹，在.gitignore中被设置了
.DS_Store 文件夹显示属性，在.gitignore中被设置了
Gemfile.lock  
.gitignore  
plugins  
.pygments-cache   
.rbenv-version Ruby版本有特殊要求 这个文件在.gitignore中被设置了   
.rvmrc   Ruby版本有特殊要求
.sass-cache  
source
config.rb           
_config.yml  
Gemfile  
.git          
.idea   Rubymine设置文件，在.gitignore中被设置了    
public  在.gitignore中被设置了  
Rakefile         
README.markdown  
sass    
.slugignore  
.themes
</code></pre>

<p>其中_deploy,source,public这三个文件夹很有趣：</p>

<pre><code>如果你是和别人合作博客，或者自己同时在好几个电脑上写博客，每次开始之前，git pull origin source获得最新的文件,rake generate生成新的页面

我们在source分支做了博客的发布，或者改变了博客的设置之后，rake generate生成网站

rake watch+pow 或者rake review+http://localhost:4000就可以看到我们所做的变化

确认无误后，rake deploy文章就发布到了博客中

当然，不要忘了更新项目 git push origin source

特别的，如果你克隆了博客，记得在git checkout source，然后rake setup_github_pages执行初始化，当然，在那之前也需要bundle install，然后rake generate就生成页面了.

如果是新建的Repo ，记得


$ mkdir yourrepo
$ cd yourrepo
$ git init
# 其实这这时如果你多新建一个index.html文件的话，github会为你生成一个jekyll博客。
$ touch README
$ git add .
$ git commit -m 'first commit'
$ git remote add origin git@github.com:username/yourname.github.com.git
$ git push origin master
</code></pre>

<p>对于新手有几个提醒: <br/>
1.时常git status,git log避免误操作<br/>
2.不要在github上直接编辑文件<br/>
3.想清楚了再下手<br/>
4.github pages的 username 大小写敏感。如果用户名和username不一致的话,默认会生成这个Repo的project pages。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加图片]]></title>
    <link href="http://tinyxd.me/blog/2012/05/23/octopresstian-jia-tu-pian/"/>
    <updated>2012-05-23T20:49:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/05/23/octopresstian-jia-tu-pian</id>
    <content type="html"><![CDATA[<p>If you like Markdown’s syntax for images, you’ll love the simplicity of the Octopress image tag.</p>

<p>Syntax</p>

<blockquote><p>img [class names] /path/to/image [width] [height] [title text [alt text]]</p></blockquote>

<p>Don’t forget brace and percent couple.</p>

<!--more-->


<p>Examples</p>

<blockquote><p>img http://placekitten.com/890/280 <br/>
img left http://placekitten.com/320/250 Place Kitten #2 <br/>
img right http://placekitten.com/300/500 150 250 Place Kitten #3 <br/>
img right http://placekitten.com/300/500 150 250 ‘Place Kitten #4’ ‘An image of a very cute kitten’</p></blockquote>
]]></content>
  </entry>
  
</feed>

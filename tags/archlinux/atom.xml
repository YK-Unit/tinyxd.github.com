<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: archlinux | Keen on Art of Tech]]></title>
  <link href="http://tinyxd.me/tags/archlinux/atom.xml" rel="self"/>
  <link href="http://tinyxd.me/"/>
  <updated>2012-06-25T01:00:57+08:00</updated>
  <id>http://tinyxd.me/</id>
  <author>
    <name><![CDATA[Tiny]]></name>
    <email><![CDATA[admin@tinyxd.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决pygments.rb (RubyPython) 找不到libpython的问题(archlinux下)]]></title>
    <link href="http://tinyxd.me/blog/2012/06/05/cannot-find-libpython/"/>
    <updated>2012-06-05T08:01:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/06/05/cannot-find-libpython</id>
    <content type="html"><![CDATA[<p>本文章转自：<a href="http://ruby-china.org/topics/289">Ruby China 论坛</a> <br/>
如果找不到python，或者系统默认得python是3.x (比如Arch Linux)，手动制定下路径 <br/>
<code>
RubyPython.configure python_exe: '/usr/bin/python2.7'
</code>
对于rails项目比如ruby-china，可以把这行代码丢到config/initializers下。</p>

<p>不过RubyPython仍然可能找不到libpython而提示lib.so not found。这是由于RubyPython确定正确libpython的规则和你的系统不兼容，可以通过手动加些symbol links来解决 (目前RubyPython的git最新代码相对当前稳定版本0.5.3改动非常大，希望新版本能解决这个问题，就先不去提交fixing了)。</p>

<p>可以参考 PythonExec initialize 方法中的规则来建symbol link.</p>

<!--more-->


<p>首先运行该python，得到版本号x.y，以python2.7为例 <br/>
```
$ python2.7 -c "import sys;print '%d.%d' % sys.version_info[:2]"</p>

<p>=> 2.7
<code>
找到该python对应得libpython，可以用工具ldd:   
</code>
$ ldd /usr/lib/python2.7 | grep python</p>

<p>=> libpython2.7.so.1.0 => /usr/lib/libpython2.7.so.1.0
<code>
为找到的这个文件创建链接。下面用#{exe_base}表示通过RubyPython.configure指定的python可执行程序的文件名部分，#{x}和#{y}是通过运行这个python找到得版本号，#{libpython}是该python对应得libpython库文件路径。   
</code>
sudo ln -s #{libpython} /usr/lib/lib#{exe_base}#{x}#{y}.so
sudo ln -s #{libpython} /usr/lib/lib#{exe_base}#{x}.#{y}.so
<code>
以我的环境(Arch Linux)为例，exe_base是python2.7，版本号x.y是2.7，libpython是/usr/lib/libpython2.7.so.1.0，   
</code>
sudo ln -s /usr/lib/libpython2.7.so.1.0 /usr/lib/libpython2.727.so
sudo ln -s /usr/lib/libpython2.7.so.1.0 /usr/lib/libpython2.72.7.so
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[arch linux下java SDK的安装与配置]]></title>
    <link href="http://tinyxd.me/blog/2012/05/27/arch-linuxxia-java-sdkde-an-zhuang-yu-pei-zhi/"/>
    <updated>2012-05-27T19:58:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/05/27/arch-linuxxia-java-sdkde-an-zhuang-yu-pei-zhi</id>
    <content type="html"><![CDATA[<p>为了节省以后查资料的时间，故而转到自己的blog做个备份。
转自：
<a href="http://www.cnblogs.com/heart-runner/archive/2011/11/30/2269640.html">Arch Linux中Java SDK的安装与配置</a></p>

<p>因为版权和公司对开源软件的态度，Oracle Java SDK已经不再包含于Arch Linux默认的Repository。</p>

<p>不过对于有开发需要，又不得不使用Oracle公司的产品的民工们，还好有AUR中提供的相应支持，让我们能方便地用安装脚本来处理Oracle Java SDK的安装和配置。</p>

<p>下面就简单地记录下的JDK的安装方法。</p>

<p>安装环境如下：</p>

<pre><code>archbang 3.3.6-1-ARCH
Oracle Java SDK 7 update 1
</code></pre>

<h2><strong>安装</strong></h2>

<ul>
<li>jre <br/>
这里先安装JDK，虽然据说openjdk的jre也能兼容Oracle Java SDK，但还是有点担心它们的兼容性。  <br/>
先在<a href="https://aur.archlinux.org/">Arch Linux AUR</a>中找到<a href="https://aur.archlinux.org/packages.php?ID=51908">JRE</a>。<br/>
<!--more-->
制作安装包 <br/>
```
$ wget --no-check-certificate -c https://aur.archlinux.org/packages/jr/jre/jre.tar.gz <br/>
$ tar -zxvf jre.tar.gz <br/>
$ cd  jre <br/>
$ makepkg</li>
</ul>


<p>```
处理依赖条件，开始安装</p>

<pre><code>$ sudo pacman -S desktop-file-utils libxtst shared-mime-info xdg-utils
[zzz@archbang jre]$ sudo pacman -U ./jre-7.4-1-i686.pkg.tar.xz 
loading packages...
resolving dependencies...
looking for inter-conflicts...

Targets (1): jre-7.4-1

Total Installed Size:   92.30 MiB

Proceed with installation? [Y/n] 
(1/1) checking package integrity                   [----------------------] 100%
(1/1) loading package files                        [----------------------] 100%
(1/1) checking for file conflicts                  [----------------------] 100%
(1/1) checking available disk space                [----------------------] 100%
(1/1) installing jre                               [----------------------] 100%

The jre package is licensed software.
You MUST read and agree to the license stored in
/usr/share/licenses/jre/LICENSE before using it.
Please relogin to include jre in your PATH.

Optional dependencies for jre
    alsa-lib: sound support
    ttf-dejavu: fonts
</code></pre>

<p>Arch Linux中，Java SDK默认的安装位置是/opt/java</p>

<pre><code>$ pwd 
/opt/java
$ ls
jre
</code></pre>

<h2>至此，JRE成功安装。</h2>

<ul>
<li><p>JDK
JDK的安装过程与JRE类似。</p>

<p>  \$ wget -c --no-check-certificate https://aur.archlinux.org/packages/jd/jdk/jdk.tar.gz <br/>
  \$ tar -zxvf jdk.tar.gz <br/>
  \$ cd jdk <br/>
  \$ makepkg <br/>
  \$ sudo pacman -U ./jdk-7.4-1-i686.pkg.tar.xz <br/>
  loading packages... <br/>
  resolving dependencies... <br/>
  looking for inter-conflicts...</p>

<p>  Targets (1): jdk-7.4-1</p>

<p>  Total Installed Size:   86.05 MiB</p>

<p>  Proceed with installation? [Y/n]  <br/>
  (1/1) checking package integrity                   [----------------------] 100% <br/>
  (1/1) loading package files                        [----------------------] 100% <br/>
  (1/1) checking for file conflicts                  [----------------------] 100% <br/>
  (1/1) checking available disk space                [----------------------] 100% <br/>
  (1/1) installing jdk                               [----------------------] 100%</p>

<p>  The jdk package is licensed software. <br/>
  You MUST read and agree to the license stored in <br/>
  /usr/share/licenses/jdk/LICENSE before using it. <br/>
  Please relogin to include jdk in your PATH.</p></li>
</ul>


<p>配置
安装之后打开/etc/environment文件编辑，添加如下内容：</p>

<pre><code>#Java SDK 
#
CLASSPATH=.:/opt/java/lib
JAVA_HOME=/opt/java
</code></pre>

<p>添加之后就可以使用java和javac命令了</p>

<pre><code>$ java -version
java version "1.7.0_01"
Java(TM) SE Runtime Environment (build 1.7.0_01-b08)
Java HotSpot(TM) Client VM (build 21.1-b02, mixed mode)
$ javac -version
javac 1.7.0_01   
</code></pre>

<p>更详细的内容可参考<a href="http://sillydong.com/myjava/arch-linux%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html">傻东の学习笔记</a>
3、解决中文乱码问题，还是用超级用户，进入/usr/share/fonts/wenquanyi，将wqy-zenhei文件夹复制到/opt/java/jre/lib/fonts下，改名为fallback，进入fallback文件夹，终端执行</p>

<pre><code># mkfontdir
和
# mkfontscale
</code></pre>

<p>4、安装eclipse，只需要打开终端执行pacman -S eclipse就可以安装eclipse最新的英文版</p>

<p>5、执行jar文件的办法。在Arch中，jar文件默认是使用归档文件管理器打开的，也就相当于解压缩，而我们需要的是执行这个jar程序，跟我做：在目标jar文件上右击，选择“属性”，找到“打开方式”的标签，选择“添加”，打开“使用自定义命令”，向其中加入下面的命令：</p>

<pre><code>java -jar
</code></pre>

<p>输完之后选择“添加”，这时候在打开方式标签下有两个选择，一种就是原来就有的“归档文件管理器”，还有就是“java”，勾选上“java”，然后关闭，这时候双击jar文件就是执行它了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[arch linux 下lxr的安装]]></title>
    <link href="http://tinyxd.me/blog/2012/05/26/arch-linux-xia-lxrde-an-zhuang/"/>
    <updated>2012-05-26T23:14:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/05/26/arch-linux-xia-lxrde-an-zhuang</id>
    <content type="html"><![CDATA[<p>经过自己两天的折腾，参考了好几个资料终于搞定。
参考资料见文章末尾。
LXR是使用WEB方式下的源代码整理浏览工具，最大的用途在于清理出了代码中函数、变量的定义、说明、应用的关系，并用链接的形式表现在网页上。LXR整理出代码的结构和调用关系，存在数据库中，并在显示时与源代码树结合，从功能上说，包括代码浏览、标识符搜索、文本搜索和文件搜索，其中的文本搜索和文件搜索利用的是第三方工具（即glimpse或swish-e）（我使用的glimpse）。它的主要组成部分包括三个：Perl编写的网页/CGI部分，基于MySQL的索引数据管理（新版本才有）和通用的文本搜索工具。目前的版本，采用Glimpse或者Swish-e中的一种作为通用文本搜索工具。在安装上，基本上也按照这三个部分来配置。</p>

<p>1.下载安装所需的工具。 <br/>
a。glimpse（http://webglimpse.net/download.php）</p>

<p>安装glimpse:（其中会用到flex 安装下就行了）</p>

<pre><code>$ ./configure

$ make

$ sudo make install
</code></pre>

<p>b。pacman -S apache php php-apache mysql</p>

<p>c。pacman -s ctags perl-dbi perl-dbd-mysql</p>

<p>d。安装完mysql 以root用户身份运行设置脚本</p>

<pre><code># rc.d start mysqld &amp;&amp; mysql_secure_installation
</code></pre>

<p>然后重启 Mysql</p>

<pre><code># rc.d restart mysqld
</code></pre>

<p>本文需要设置密码为空（后面有说明）</p>

<!--more-->


<p>用mysql -p -u root</p>

<p>登陆mysql,然后执行下面语句: set password for 'root'@'localhost' =password('');flush privileges;e.安装Perl的Magic模块</p>

<p>下载地址http://search.cpan.org/~knok/File-MMagic-1.27/MMagic.pm</p>

<pre><code>[root@localhost File-MMagic-1.27]# ls ChangeLog COPYING      MANIFEST MMagic.pm README.ja contrib    Makefile.PL META.yml README.en t [root@localhost File-MMagic-1.27]# perl Makefile.PL Checking if your kit is complete... Looks good Writing Makefile for File::MMagic [root@localhost File-MMagic-1.27]# ls
ChangeLog COPYING   Makefile.PL META.yml   README.en t
contrib    Makefile MANIFEST     MMagic.pm README.ja

[root@localhost File-MMagic-1.27]# make
cp MMagic.pm blib/lib/File/MMagic.pm
Manifying blib/man3/File::MMagic.3pm
[root@localhost File-MMagic-1.27]# make install
Installing /usr/lib/perl5/site_perl/5.8.8/File/MMagic.pm
Installing /usr/share/man/man3/File::MMagic.3pm Writing /usr/lib/perl5/site_perl/5.8.8/i386-linux-thread-multi/auto/File/MMagic/.packlist Appending installation info to /usr/lib/perl5/5.8.8/i386-linux-thread-multi/perllocal.pod
</code></pre>

<p>2.设置</p>

<p>尽管lxr源码里有一个INSTALL文件，但不详，这里写下来我自己配置的步骤。
1）位置规划
LXR除了数据库那一部分不需要考虑存放位置以外，还有CGI/HTML部分、索引生成工具部分和</p>

<p>所需要索引的源代码部分需要考虑，我的实践中使用的与INSTALL缺省的不同，最大的一点不同在于我</p>

<p>将WEB部分和工具部分分离开，只允许WEB部分暴露给浏览器——主要是基于也许会更安全一些的考虑。
另一个不同是用符号链接而不是真正的源代码目录作为源代码部分，因为LXR索引的Linux Kernel是最常用的，</p>

<p>而Kernel本身还被用来重编内核和升级，所以不适合完全拷贝过来。
本例中使用的是/usr/local/lxr目录作为LXR的根目录。</p>

<pre><code>#tar zxvf lxr-0.9.1.tar.gz -C /usr/local ；将lxr解压到/usr/local/lxr下 
#cd /usr/local/

#mv Local.pm diff ident search source templates  #将web相关部分移到templates下  

#mv templates http                            #http目录，用于存放WEB部分  

#ln -s /usr/local/lxr/http/Local.pm /usr/lib/perl5/site_perl/ 

#ln -s http/lxr.conf         #为web部分和工具部分都需要用的文件建符号连接 
#mv lib /usr/lib/perl5/site_perl/LXR  #将自定义的perl库文件拷贝
</code></pre>

<p>到perl/mod_perl使用的缺省库文件目录中</p>

<pre><code>#ln -s /usr/lib/perl5 /usr/local/lib  #否则在运行时会出现Can't locate LXR/Files.pm等错误 
</code></pre>

<p>建立源代码根目录,（当前在lxr目录）</p>

<pre><code>#mkdir src ；源代码部分的根 

并将 linux-2.6.39的源码链接到此目录下。

#cd src 

mkdir glimpse 

ln -s ../../../../src/linux-2.6.39 2.6.39

#vi versions ；编辑/usr/local/lxr/src/versions文件，内容为2.6.39，表示让lxr索引2.6.39

#cd ../../ ；回到/usr/local/lxr 
</code></pre>

<p>2）修改lxr.conf
准备好了目录结构，下一步就是改写lxr.conf文件。缺省的lxr.conf已经从templates拷贝到/usr/local/lxr/http/下了，</p>

<p>并在/usr/local/lxr/下有个连接。 注释掉所有与swish-e相关的变量定义,其余设置如下</p>

<pre><code>'glimpsebin' =&gt; '/usr/local/bin/glimpse', 

'glimpseindex' =&gt; '/usr/local/bin/glimpseindex', 

'ectagsbin' =&gt; '/usr/bin/ctags', 

'genericconf' =&gt; '/usr/lib/perl5/site_perl/LXR/Lang/generic.conf' 

'ectagsconf' =&gt; '/usr/lib/perl5/site_perl/LXR/Lang/ectags.conf' 

'baseurl' =&gt; 'http://192.168.1.102/lxr'                 #主机的IP地址 

'range' =&gt; [ readfile('/usr/local/lxr/src/versions') ]  

'default' =&gt; '2.6.39'                                  #缺省的代码树名 

# Templates used for headers and footers 下所有路径均设置为绝对路径,如 

'htmlhead' =&gt; '/usr/local/lxr/http/html-head.html' 



'sourceroot' =&gt; '/usr/local/lxr/src'       #源码根目录    (注意，最后无/) 

'sourcerootname' =&gt; 'Linux-$v'        #它将显示在缺省的最高级源码目录上 

'glimpsedir' =&gt; '/usr/local/lxr/src/glimpse'         #(注意，最后无/) 
</code></pre>

<p>3）apache的httpd.conf (/etc/httpd/conf/httpd.conf)
保证装了mod_perl的时候，在httpd.conf中添加以下几行：</p>

<pre><code>Alias /lxr/ /usr/local/lxr/http/ 

&lt;Directory /usr/local/lxr/http/&gt;

AllowOverride None

Options FollowSymLinks

&lt;Files ~  "(search|source|ident|diff|find)$"&gt;

SetHandler perl-script

PerlHandler ModPerl::Registry       #注意这里不是Apache::Registry

Options +ExecCGI

PerlOptions +ParseHeaders

&lt;/Files&gt;

&lt;/Directory&gt; 
</code></pre>

<p>表示访问/lxr就相当于访问/usr/local/lxr/http，且用perl解释search、source、ident、diff和find几个脚本，</p>

<p>而其他的仍然当成html来使用。
如果没有mod_perl，可以用SetHandler cgi-script代替perl-script，一样可以用，PerlHandler就不用了。
4.initialize
1）初始化MySQL数据库 (mysql) :</p>

<p>进入lxr目录/usr/local/lxr</p>

<p># mysql</p>

<p>(反斜杠). initdb-mysql</p>

<p>2).建glimpse索引  <br/>
在/usr/local/lxr/src/2.6.39/下运行'find . -name "*.[chS]" -follow | glimpseindex -H . -o -F'，索引所有.c、.h、.S（汇编）文件。这个过程比较耗时，但比起下一个过程来，就小巫见大巫了。
3.)建identity索引 这是LXR精髓所在
在/usr/local/lxr/下运行'./genxref --version=2.6.39--url=http://192.168.1.102/lxr'，这个过程时间比较长，其结果就是在MySQL中添东西。如果已经做过索引了，它就只关心那些修改过的或新的文件，速度就快多了。这个过程如果中断了，最好清空数据库重新来过，否则可能会有错误。  <br/>
4).修改权限  <br/>
最简单的办法就是把/usr/local/lxr/http下所有的文件都改成apache的属主。在/usr/local/lxr/下运行'chown -R apache.apache http '。   <br/>
5.startup   (rc.d restart httpd;rc.d restart mysqld) <br/>
重启mysql和httpd，然后访问http://192.168.1.102/lxr/source/就可以了。比较奇怪的是，因为这个cgi允许用类似目录一样的形式（source/）来访问，所以，如果服务器端有更新，浏览器端仍会使用老的页面，refresh也没用。这时只有清空本地cache了。 <br/>
 6.参考博客</p>

<p>[内核分析]LXR安装心得(0.9.3版)---RH8.0测试通过http://www.cnblogs.com/huqingyu/archive/2005/02/19/106080.html</p>

<p>利用LXR建立源代码交叉索引 【原】http://hi.baidu.com/kissdev/blog/item/6e493daf15cf33c77cd92af9.html</p>

<p>LXR安装过程简介(0.3版) http://blog.chinaunix.net/u1/46901/showart_397299.html</p>

<p>高亮LXR的代码 http://mjxian.cn/wordpress/archives/lxr-syntax-highlighting.html</p>

<p>mysql wiki：https://wiki.archlinux.org/index.php/MySQL_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87</p>

<p>附：部分软件版本</p>

<p>File-MMagic-1.27.tar.gz</p>

<p>perl-dbi-1.616-2-i686.pkg.tar.xz</p>

<p>perl-dbd-mysql-4.020-1-i686.pkg.tar.xz</p>

<p>lxr-0.9.10.tgz</p>

<p>glimpse-4.18.6</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[archbang arch linux 安装inode ]]></title>
    <link href="http://tinyxd.me/blog/2012/05/25/archbang-arch-linux-an-zhuang-inode/"/>
    <updated>2012-05-25T14:34:00+08:00</updated>
    <id>http://tinyxd.me/blog/2012/05/25/archbang-arch-linux-an-zhuang-inode</id>
    <content type="html"><![CDATA[<p>第一步：cp iNodeClient.tar.gz 到 /home/***** 目录下。进入~目录下  <br/>
第二步：终端运行 tar -xvf iNodeClient.tar.gz。<br/>
第三步：修改/home//iNodeClient/下install.sh，把 OS_UBUNTU=`cat /etc/issue | grep 'Ubuntu'`那一行及以下的脚本都删除，然后保存，执行sudo ./install.sh。<br/>
第四步：cp  home/*****/iNodeClient/ 目录下的iNodeAuthService到/etc/rc.d/目录下，并修改权限chmod 755 /etc/rc.d/iNodeAuthService。<br/>
第五步：打开/etc/rc.conf ，在DAEMONS处添加@iNodeAuthService。（让iNode认证服务开机自启动） <br/>
第六步：现在执行sudo /etc/rc.d/iNodeAuthService start，发现出错了。错误出现在enablecards.ps这个文件里，打开看，你会发现这个文件的作用只是用来up网卡。一般来说你的网卡都已经up了的啦。你可以把里面的内容改成： <br/>
#!/bin/sh<br/>
x=eth0（你所使用的网卡） <br/>
ifconfig $x up  <br/>
再运行一次sudo /etc/rc.d/iNodeAuthService start，你应该会发现服务启动成功了。  <br/>
第七步：命令行里面执行一下sudo ./iNodeClient 然后楼主发现出现了一些库的依赖问题。iNode需要一些比较旧的库，对于jpeg tiff等库 你可以用ln -s 来用新版本的库代替旧版本。而其中有一个是libpng12.so.0是必须需要旧版本的。见附件 或者可以去官网自己下载ftp://ftp.simplesystems.org/pub/libpng/png/src/  <br/>
需要下载的文件是libpng-1.2.49.tar.bz2 <br/>
安装方法如下： <br/>
1.解压，然后执行./configure --prefix=/usr/ <br/>
2.编译及安装 <br/>
#make  <br/>
#make install <br/>
安装之前可以make check 以下 看看有没有什么错误，如果没错误 make install 那么libpng就安装好了。</p>

<p>参考：http://ecnc.sysu.edu.cn/viewthread.php?tid=18558</p>
]]></content>
  </entry>
  
</feed>
